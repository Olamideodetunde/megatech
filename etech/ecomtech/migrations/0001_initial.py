# Generated by Django 4.1.4 on 2023-03-15 06:28

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('cust_lname', models.CharField(max_length=200, null=True)),
                ('cust_fname', models.CharField(max_length=200, null=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('cust_password', models.CharField(max_length=20)),
                ('cust_address', models.TextField(null=True)),
                ('cust_image', models.ImageField(max_length=200, null=True, upload_to='customers/')),
                ('cust_phone', models.CharField(max_length=20, null=True)),
                ('date_joined', models.DateField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Newsletter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=100, null=True)),
                ('date_subscribed', models.DateField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_name', models.CharField(max_length=100, null=True)),
                ('stock_no', models.IntegerField(null=True)),
                ('prod_image', models.ImageField(max_length=200, null=True, upload_to='products/')),
                ('manufacturer_name', models.CharField(choices=[('Apple', 'Apple'), ('Samsung', 'Samsung'), ('Amazon', 'Amazon'), ('Sony', 'Sony'), ('Dell', 'Dell'), ('HP', 'Hp'), ('Nokia', 'Nokia')], max_length=50, null=True)),
                ('category', models.CharField(choices=[('Laptop', 'Laptop'), ('Acessories', 'Accessories'), ('Phones', 'Phones'), ('Tablet', 'Tablet'), ('Camera', 'Cameras')], max_length=50, null=True)),
                ('product_description', models.TextField(null=True)),
                ('product_price', models.FloatField(max_length=11, null=True)),
                ('slug', models.SlugField(null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Wishlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateField(auto_now=True)),
                ('product_name', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='prod_wish', to='ecomtech.product')),
                ('wishers_deets', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='wishdeets', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trx_refno', models.CharField(max_length=200, null=True)),
                ('trx_status', models.CharField(choices=[('pending', 'Pending'), ('failed', 'Failed'), ('paid', 'Paid')], max_length=50, null=True)),
                ('trx_method', models.CharField(choices=[('card', 'Card'), ('cash', 'Cash')], max_length=50, null=True)),
                ('trx_paygate', models.TextField(null=True)),
                ('trx_date', models.DateTimeField(auto_now=True)),
                ('trx_expiry', models.DateTimeField(null=True)),
                ('trx_customer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cust_trx', to=settings.AUTH_USER_MODEL)),
                ('trx_totalamt', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='prod_trx', to='ecomtech.product')),
            ],
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity_added', models.IntegerField(default='1', null=True)),
                ('date_added', models.DateField(auto_now=True)),
                ('cust_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cartdeets', to=settings.AUTH_USER_MODEL)),
                ('product_name', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='prod_cart', to='ecomtech.product')),
            ],
        ),
    ]
